apply plugin: 'com.android.application'

// Cannot make method static, @runchen.brc
String getEnvValue(key, defValue) {
    def val = System.getProperty(key)
    if (null != val) {
        return val
    }
    val = System.getenv(key)
    if (null != val) {
        return val
    }
    return defValue
}

ext.MTL_buildId = getEnvValue("MUPP_BUILD_ID", 'localbuild')
ext.BUILD_IM_TYPE = getEnvValue("BUILD_IM_TYPE", 'internal')

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    signingConfigs {
        release {
            keyAlias 'key0'
            keyPassword 'livepush'
            storeFile file('interaction.jks')
            storePassword 'livepush'
        }
        debug {
            keyAlias 'key0'
            keyPassword 'livepush'
            storeFile file('interaction.jks')
            storePassword 'livepush'
        }
    }

    defaultConfig {
        applicationId "com.aliyun.enterprise.live"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 2
        versionName '2.0.0'
        manifestPlaceholders = [
                appLabel    : "@string/app_name",
                appIcon     : "@mipmap/ic_launcher_general",
                appIconRound: "@mipmap/ic_launcher_general",
        ]

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        all {
            buildConfigField "String", "BUILD_IM_TYPE", "\"${BUILD_IM_TYPE}\""
        }
        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-rules-app.pro'
            consumerProguardFiles 'proguard-rules.pro' //子模块
            buildConfigField "Boolean", "DEBUGGING_FEATURES", "false"
        }
        debug {
            minifyEnabled false
            shrinkResources false
            buildConfigField "Boolean", "DEBUGGING_FEATURES", "false"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${project.name}-${variant.buildType.name}-${MTL_buildId}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: "../libs", include: ["*.jar", "*.aar"])
    // 外部依赖
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // 本地依赖
    implementation project(':AUIUikit:AUIBaseKit')
    implementation project(':AUIUikit:AUIEnterpriseKit')
    implementation project(':AUIUikit:AUILikeKit')
    implementation project(':AUIUikit:AUIBarrageKit')
    implementation project(':AUIUikit:AUIPlayerKit')

    // 开发依赖
    rootProject.allprojects {
        if (it.name == 'debugger') {
            implementation it
            println('debugger setup')
        }
    }
}
