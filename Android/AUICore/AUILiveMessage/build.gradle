apply plugin: 'com.android.library'
apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/config.gradle'

// Cannot make method static, @runchen.brc
String getEnvValue(key, defValue) {
    def val = System.getProperty(key)
    if (null != val) {
        return val
    }
    val = System.getenv(key)
    if (null != val) {
        return val
    }
    return defValue
}

// IMType, internal->内部IM，rongcloud->融云IM
ext.BUILD_IM_TYPE = getEnvValue("BUILD_IM_TYPE", 'internal')

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/releases' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        //引入其他的插件
        classpath 'digital.wup:android-maven-publish:3.4.0'
    }
}

apply plugin: 'digital.wup.android-maven-publish'
apply from: 'https://paas-sdk.oss-cn-shanghai.aliyuncs.com/paas/room/android/release/config/publish.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-3.3-bin.zip'
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "${VER}"

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':AUIBaseKits:AUICommon')
    api project(':AUICore:AUIAppServer')

    api project(':AUIBaseKits:AUIMessage')
    // 切换消息SDK引擎
    if (BUILD_IM_TYPE == "rongcloud") {
        implementation project(':AUIBaseKits:AUIMessage:AUIMessageImpl-RongCloud')
    } else {
        implementation project(':AUIBaseKits:AUIMessage:AUIMessageImpl-Internal')
    }
}